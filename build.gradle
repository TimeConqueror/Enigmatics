buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.72"
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

version = "${config.minecraft.version}-${config.enigmatics.version}"
group = 'com.enigmatics' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'Enigmatics'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20200710-1.15.1'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    accessTransformer(file('src/main/resources/META-INF/accesstransformer.cfg'))

    def extraArgs = []
    def extraJvmArgs = Arrays.asList('-Dmixin.env.disableRefMap=true'.split(' '))

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
//            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            setArgs(extraArgs)
            setJvmArgs(extraJvmArgs)

            mods {
                timecore {
                    source sourceSets.main

                    resource sourceSets.main.resources
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            //property 'forge.logging.console.level', 'debug'

            setArgs(extraArgs)
            setJvmArgs(extraJvmArgs)

            mods {
                timecore {
                    source sourceSets.main

                    resource sourceSets.main.resources
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
//            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
//            property 'forge.logging.console.level', 'debug'

            args '--mod', 'lootgames', '--all', '--output', ("\"" + projectDir.path + "/src/main/resources/\"")
            setArgs(extraArgs)
            setJvmArgs(extraJvmArgs)

            mods {
                timecore {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
}

repositories {
    maven {
        name = "TimeConqueror's Maven"
        url = "https://raw.githubusercontent.com/TimeConqueror/maven/master"
        artifactUrls 'https://github.com/TimeConqueror/maven/blob/master/' //fallback url
    }
//    maven {
//        url = "./localmaven"
//    }
    flatDir {
        dirs 'libs', 'runtimeMods'
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/maven'
    }
    mavenCentral()
}

configurations {
    // configuration that holds jars to include in the jar
    implementation.extendsFrom(shade)
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.15.2-31.2.31'

    implementation group: 'ru.timeconqueror', name: 'TimeCore', version: '1.15.2-2.1.0.0.build2', classifier:'dev-deobf-1.15.1-snapshot_20200710', changing: true
    compile("org.spongepowered:mixin:0.8") {
        transitive = false
    }

    runtimeOnly fg.deobf("mezz.jei:jei-1.15.2:6.0.2.12")

    compileOnly 'org.jetbrains:annotations:18.0.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"

    file("runtimeMods").eachFile { file ->
        def splitPos = file.name.lastIndexOf("-")
        def modartifact = file.name.substring(0, splitPos)
        def modversion = file.name.substring(splitPos + 1, file.name.length() - 4)
        def modreference = "lib:$modartifact:$modversion"

        dependencies {
            runtimeOnly fg.deobf(project.dependencies.create(modreference) {
                transitive = false
            })
        }
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "enigmatics",
                "Specification-Vendor"    : "Time_Conqueror, Dizzlepop12",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Time_Conqueror, Dizzlepop12",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }

    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF/*.RSA'
            exclude 'META-INF/*.SF'
            exclude("META-INF/services/cpw.mods.modlauncher.*")
        }
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

// Create source attachment for dev jar
task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/maven"
        }
    }
}